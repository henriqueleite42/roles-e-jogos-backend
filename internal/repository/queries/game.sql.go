// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: game.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGame = `-- name: CreateGame :one
INSERT INTO "games" (
	"name",
	"description",
	"icon_path",
	"kind",
	"ludopedia_id",
	"ludopedia_url",
	"min_amount_of_players",
	"max_amount_of_players",
	"average_duration",
	"min_age"
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8,
	$9,
	$10
) RETURNING "id"
`

type CreateGameParams struct {
	Name               string
	Description        string
	IconPath           pgtype.Text
	Kind               KindEnum
	LudopediaID        pgtype.Int4
	LudopediaUrl       pgtype.Text
	MinAmountOfPlayers int32
	MaxAmountOfPlayers int32
	AverageDuration    int32
	MinAge             int32
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (int32, error) {
	row := q.db.QueryRow(ctx, createGame,
		arg.Name,
		arg.Description,
		arg.IconPath,
		arg.Kind,
		arg.LudopediaID,
		arg.LudopediaUrl,
		arg.MinAmountOfPlayers,
		arg.MaxAmountOfPlayers,
		arg.AverageDuration,
		arg.MinAge,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getGameByLudopediaId = `-- name: GetGameByLudopediaId :one
SELECT
	g."id",
	g."name",
	g."description",
	g."icon_path",
	g."kind",
	g."ludopedia_id",
	g."ludopedia_url",
	g."min_amount_of_players",
	g."max_amount_of_players",
	g."average_duration",
	g."min_age",
	g."created_at"
FROM "games" g
WHERE
	g."ludopedia_id" = $1
LIMIT 1
`

type GetGameByLudopediaIdRow struct {
	ID                 int32
	Name               string
	Description        string
	IconPath           pgtype.Text
	Kind               KindEnum
	LudopediaID        pgtype.Int4
	LudopediaUrl       pgtype.Text
	MinAmountOfPlayers int32
	MaxAmountOfPlayers int32
	AverageDuration    int32
	MinAge             int32
	CreatedAt          pgtype.Timestamptz
}

func (q *Queries) GetGameByLudopediaId(ctx context.Context, ludopediaID pgtype.Int4) (GetGameByLudopediaIdRow, error) {
	row := q.db.QueryRow(ctx, getGameByLudopediaId, ludopediaID)
	var i GetGameByLudopediaIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IconPath,
		&i.Kind,
		&i.LudopediaID,
		&i.LudopediaUrl,
		&i.MinAmountOfPlayers,
		&i.MaxAmountOfPlayers,
		&i.AverageDuration,
		&i.MinAge,
		&i.CreatedAt,
	)
	return i, err
}
