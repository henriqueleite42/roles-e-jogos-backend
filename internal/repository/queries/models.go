// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CollectionImportStatusEnum string

const (
	CollectionImportStatusEnumSTARTED   CollectionImportStatusEnum = "STARTED"
	CollectionImportStatusEnumCOMPLETED CollectionImportStatusEnum = "COMPLETED"
	CollectionImportStatusEnumFAILED    CollectionImportStatusEnum = "FAILED"
)

func (e *CollectionImportStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CollectionImportStatusEnum(s)
	case string:
		*e = CollectionImportStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CollectionImportStatusEnum: %T", src)
	}
	return nil
}

type NullCollectionImportStatusEnum struct {
	CollectionImportStatusEnum CollectionImportStatusEnum
	Valid                      bool // Valid is true if CollectionImportStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCollectionImportStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.CollectionImportStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CollectionImportStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCollectionImportStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CollectionImportStatusEnum), nil
}

type CollectionImportTriggerEnum string

const (
	CollectionImportTriggerEnumACCOUNTCREATION CollectionImportTriggerEnum = "ACCOUNT_CREATION"
	CollectionImportTriggerEnumMANUALBYUSER    CollectionImportTriggerEnum = "MANUAL_BY_USER"
	CollectionImportTriggerEnumACCOUNTLINK     CollectionImportTriggerEnum = "ACCOUNT_LINK"
)

func (e *CollectionImportTriggerEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CollectionImportTriggerEnum(s)
	case string:
		*e = CollectionImportTriggerEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for CollectionImportTriggerEnum: %T", src)
	}
	return nil
}

type NullCollectionImportTriggerEnum struct {
	CollectionImportTriggerEnum CollectionImportTriggerEnum
	Valid                       bool // Valid is true if CollectionImportTriggerEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCollectionImportTriggerEnum) Scan(value interface{}) error {
	if value == nil {
		ns.CollectionImportTriggerEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CollectionImportTriggerEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCollectionImportTriggerEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CollectionImportTriggerEnum), nil
}

type EventAttendanceStatusEnum string

const (
	EventAttendanceStatusEnumGOING    EventAttendanceStatusEnum = "GOING"
	EventAttendanceStatusEnumMAYBE    EventAttendanceStatusEnum = "MAYBE"
	EventAttendanceStatusEnumNOTGOING EventAttendanceStatusEnum = "NOT_GOING"
)

func (e *EventAttendanceStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventAttendanceStatusEnum(s)
	case string:
		*e = EventAttendanceStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for EventAttendanceStatusEnum: %T", src)
	}
	return nil
}

type NullEventAttendanceStatusEnum struct {
	EventAttendanceStatusEnum EventAttendanceStatusEnum
	Valid                     bool // Valid is true if EventAttendanceStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventAttendanceStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.EventAttendanceStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventAttendanceStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventAttendanceStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventAttendanceStatusEnum), nil
}

type EventConfidentialityEnum string

const (
	EventConfidentialityEnumPUBLIC      EventConfidentialityEnum = "PUBLIC"
	EventConfidentialityEnumONLYINVITED EventConfidentialityEnum = "ONLY_INVITED"
)

func (e *EventConfidentialityEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventConfidentialityEnum(s)
	case string:
		*e = EventConfidentialityEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for EventConfidentialityEnum: %T", src)
	}
	return nil
}

type NullEventConfidentialityEnum struct {
	EventConfidentialityEnum EventConfidentialityEnum
	Valid                    bool // Valid is true if EventConfidentialityEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventConfidentialityEnum) Scan(value interface{}) error {
	if value == nil {
		ns.EventConfidentialityEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventConfidentialityEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventConfidentialityEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventConfidentialityEnum), nil
}

type KindEnum string

const (
	KindEnumRPG       KindEnum = "RPG"
	KindEnumGAME      KindEnum = "GAME"
	KindEnumEXPANSION KindEnum = "EXPANSION"
)

func (e *KindEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = KindEnum(s)
	case string:
		*e = KindEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for KindEnum: %T", src)
	}
	return nil
}

type NullKindEnum struct {
	KindEnum KindEnum
	Valid    bool // Valid is true if KindEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullKindEnum) Scan(value interface{}) error {
	if value == nil {
		ns.KindEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.KindEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullKindEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.KindEnum), nil
}

type OtpPurposeEnum string

const (
	OtpPurposeEnumSIGNIN OtpPurposeEnum = "SIGN_IN"
)

func (e *OtpPurposeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OtpPurposeEnum(s)
	case string:
		*e = OtpPurposeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for OtpPurposeEnum: %T", src)
	}
	return nil
}

type NullOtpPurposeEnum struct {
	OtpPurposeEnum OtpPurposeEnum
	Valid          bool // Valid is true if OtpPurposeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOtpPurposeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.OtpPurposeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OtpPurposeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOtpPurposeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OtpPurposeEnum), nil
}

type ProviderEnum string

const (
	ProviderEnumGOOGLE    ProviderEnum = "GOOGLE"
	ProviderEnumLUDOPEDIA ProviderEnum = "LUDOPEDIA"
)

func (e *ProviderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProviderEnum(s)
	case string:
		*e = ProviderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ProviderEnum: %T", src)
	}
	return nil
}

type NullProviderEnum struct {
	ProviderEnum ProviderEnum
	Valid        bool // Valid is true if ProviderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProviderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ProviderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProviderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProviderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProviderEnum), nil
}

type Account struct {
	AvatarPath pgtype.Text
	CreatedAt  pgtype.Timestamptz
	Handle     string
	ID         int32
	IsAdmin    bool
	Name       pgtype.Text
}

type Connection struct {
	AccessToken    pgtype.Text
	AccountID      int32
	CreatedAt      pgtype.Timestamptz
	ExternalHandle pgtype.Text
	ExternalID     string
	Provider       ProviderEnum
	RefreshToken   pgtype.Text
}

type EmailAddress struct {
	AccountID    int32
	CreatedAt    pgtype.Timestamptz
	EmailAddress string
	ValidatedAt  pgtype.Timestamptz
}

type Event struct {
	CreatedAt          pgtype.Timestamptz
	Date               pgtype.Timestamptz
	Description        string
	IconPath           pgtype.Text
	ID                 int32
	LocationAddress    string
	LocationName       string
	MaxAmountOfPlayers pgtype.Int4
	Name               string
	OwnerID            int32
}

type EventAttendance struct {
	AccountID   int32
	ConfirmedAt pgtype.Timestamptz
	EventID     int32
	ID          int32
	Status      EventAttendanceStatusEnum
}

type EventGame struct {
	EventID int32
	GameID  int32
	ID      int32
}

type Game struct {
	AverageDuration    int32
	CreatedAt          pgtype.Timestamptz
	Description        string
	IconPath           pgtype.Text
	ID                 int32
	Kind               KindEnum
	LudopediaID        pgtype.Int4
	LudopediaUrl       pgtype.Text
	MaxAmountOfPlayers int32
	MinAge             int32
	MinAmountOfPlayers int32
	Name               string
}

type ImportCollectionLog struct {
	AccountID  int32
	CreatedAt  pgtype.Timestamptz
	EndedAt    pgtype.Timestamptz
	ExternalID string
	ID         int32
	Provider   ProviderEnum
	Status     CollectionImportStatusEnum
	Trigger    CollectionImportTriggerEnum
}

type Media struct {
	CreatedAt   pgtype.Timestamptz
	Date        pgtype.Timestamptz
	Description pgtype.Text
	GameID      pgtype.Int4
	ID          int32
	OwnerID     int32
	Path        string
}

type OneTimePassword struct {
	AccountID int32
	Code      string
	CreatedAt pgtype.Timestamptz
	Purpose   OtpPurposeEnum
}

type PersonalCollection struct {
	AccountID  int32
	AcquiredAt pgtype.Timestamptz
	CreatedAt  pgtype.Timestamptz
	GameID     int32
	ID         int32
	Paid       pgtype.Int4
}

type Session struct {
	AccountID int32
	CreatedAt pgtype.Timestamptz
	SessionID string
}
